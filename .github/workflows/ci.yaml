name: ci

on:
  push:
    branches:
      - "main"
    tags:
      - "v*"
  pull_request:
    branches:
      - "main"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  prepare:
    runs-on: ubuntu-24.04
    steps:
      - name: Get lowercase GitHub username
        id: repository_owner
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ github.repository_owner }}
      - name: Set outputs
        id: set-outputs
        run: |
          echo 'image=ghcr.io/${{ steps.repository_owner.outputs.lowercase }}/asterisk-hass-addon' >> "${GITHUB_OUTPUT}"
          # Only enable push on push events or pull requests coming from the same repository, except from dependabot
          echo 'push=${{ github.event_name == 'push' || github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository && github.actor != 'dependabot[bot]' }}' >> "${GITHUB_OUTPUT}"
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ steps.set-outputs.outputs.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
    outputs:
      image: ${{ steps.set-outputs.outputs.image }}
      push: ${{ steps.set-outputs.outputs.push }}
      meta-version: ${{ steps.meta.outputs.version }}
      meta-labels: ${{ steps.meta.outputs.labels }}
      meta-json: ${{ steps.meta.outputs.json }}
  build:
    needs:
      - prepare
    strategy:
      fail-fast: false
      matrix:
        target:
          - platform: linux/amd64
            runner: ubuntu-24.04
          - platform: linux/386
            runner: ubuntu-24.04
          - platform: linux/arm/v6
            runner: ubuntu-24.04-arm
          - platform: linux/arm/v7
            runner: ubuntu-24.04-arm
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
    name: build (${{ matrix.target.platform }})
    runs-on: ${{ matrix.target.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Needed to calculate branch for tag
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        if: needs.prepare.outputs.push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set vars
        id: vars
        run: |
          echo "artifact-name=digest-$(echo '${{ matrix.target.platform }}' | tr / -)" >> "${GITHUB_OUTPUT}"

          # Set the cache-to output
          echo 'cache-to=type=gha,scope=${{ github.ref_name }}-${{ matrix.target.platform }}' >> "${GITHUB_OUTPUT}"

          # Set the cache-from output
          if [[ '${{ github.event_name }}' == 'push' ]]; then
            if [[ '${{ github.ref }}' == 'refs/tags/v'* ]]; then
              # Use cache from the branch when building a tag
              branch="$(git branch -r --contains '${{ github.ref }}')"
              branch="${branch##*/}"
              echo "cache-from=type=gha,scope=${branch}-${{ matrix.target.platform }}" >> "${GITHUB_OUTPUT}"
            else
              # Use cache from the same branch when not building a tag
              echo 'cache-from=type=gha,scope=${{ github.ref_name }}-${{ matrix.target.platform }}' >> "${GITHUB_OUTPUT}"
            fi
          else
            # Use cache from target branch too when building a pull request

            # In this case, it has to be a multiline string
            # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
            EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)

            echo "cache-from<<${EOF}" >> "${GITHUB_OUTPUT}"

            printf '%s\n' \
              "type=gha,scope=${{ github.ref_name }}-${{ matrix.target.platform }}" \
              "type=gha,scope=${{ github.base_ref }}-${{ matrix.target.platform }}" \
              >> "${GITHUB_OUTPUT}"

            echo "${EOF}" >> "${GITHUB_OUTPUT}"
          fi
      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: asterisk
          platforms: ${{ matrix.target.platform }}
          labels: ${{ needs.prepare.outputs.meta-labels }}
          outputs: |
            type=image,name=${{ needs.prepare.outputs.image }},push-by-digest=true,name-canonical=true,push=${{ needs.prepare.outputs.push }}
          cache-from: |
            ${{ steps.vars.outputs.cache-from }}
          cache-to: |
            ${{ steps.vars.outputs.cache-to }}
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest='${{ steps.build.outputs.digest }}'
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.vars.outputs.artifact-name }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  push:
    needs:
      - prepare
      - build
    runs-on: ubuntu-24.04
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          pattern: digest-*
          merge-multiple: true
          path: /tmp/digests
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        if: needs.prepare.outputs.push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create manifest list and push
        if: needs.prepare.outputs.push == 'true'
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -r '"-t " + (.tags | join(" -t "))' <<< '${{ needs.prepare.outputs.meta-json }}') \
            $(printf '${{ needs.prepare.outputs.image }}@sha256:%s ' *)
      - name: Inspect image
        if: needs.prepare.outputs.push == 'true'
        run: |
          docker buildx imagetools inspect '${{ needs.prepare.outputs.image }}:${{ needs.prepare.outputs.meta-version }}'
